name: Validar Quiz Desafio Revertendo e Restaurando Versoes
on:
  push:
    paths:
      - '.github/workflows/quiz_validation_Desafio_Revertendo_Restaurando_Versoes.yml'

permissions:
  write-all

jobs:
  validar_quiz:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout do código
        uses: actions/checkout@v2

      - name: Obter conteúdo da issue
        id: obter_issue
        uses: actions/github-script@v6
        with:
          script: |
            const issueTitulo = "Desafio Quiz: Revertendo e Restaurando Versões";
            const issues = await github.rest.issues.listForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
              state: 'all',
            });

            const issue = issues.data.find(i => i.title === issueTitulo);

            if (!issue) {
              console.log(`Issue "${issueTitulo}" não encontrada.`);
              return;
            }

            core.setOutput('issueNumber', issue.number);
            return issue.body;

      - name: Validar respostas do quiz
        id: validar_respostas
        uses: actions/github-script@v6
        with:
          script: |
            const issueBody = ${{ steps.obter_issue.outputs.result }};
            if (!issueBody) return;

            const respostasCorretas = {
              "1": "Para ter segurança ao corrigir erros, experimentar novas ideias e recuperar versões estáveis",
              "2": "Um \"instantâneo\" ou \"foto\" do seu projeto em um determinado momento, guardando o estado do trabalho",
              "3": "Selecionar quais arquivos e alterações você quer incluir no próximo backup",
              "4": "Usar a funcionalidade que permite voltar o arquivo ao seu último backup salvo",
              "5": "Mantém a história do seu trabalho organizada, registrando que a mudança anterior foi desfeita por um novo backup",
              "6": "Você pode acabar perdendo todo o trabalho que foi feito entre esse backup antigo e o momento atual",
              "7": "Para evitar confusão e garantir que todos estejam cientes das mudanças no histórico do projeto" // Ponto final removido aqui
            };

            const respostasUsuario = {};
            const perguntas = issueBody.split("### ");

            perguntas.slice(1).forEach(pergunta => {
              const numeroPerguntaMatch = pergunta.match(/^(\d+) - /);
              if (!numeroPerguntaMatch) return;

              const numeroPergunta = numeroPerguntaMatch[1];
              const opcoes = pergunta.split("- [");

              opcoes.slice(1).forEach(opcao => {
                if (opcao.startsWith("x")) {
                  respostasUsuario[numeroPergunta] = opcao.split("] ")[1].trim();
                }
              });
            });

            let feedback = "## Resultado do Quiz\n\n";
            let todasCorretas = true;

            function sanitizeString(str) {
              // Remove acentos
              str = str.normalize('NFD').replace(/[\u0300-\u036f]/g, '');
              // Remove caracteres invisíveis e nbsp (espaço não quebrável)
              str = str.replace(/[\u200B-\u200F\uFEFF\u00A0]/g, '');
              // Remove pontuação comum no final (.,!?;) para tornar a comparação mais robusta
              str = str.replace(/[.,\/#!$%\^&\*;:{}=\-_`~()]+\s*$/, ''); // Remove um ou mais caracteres de pontuação seguidos de espaços no final
              // Remove aspas externas se houver
              str = str.replace(/^"(.*)"$/, '$1');
              // Trim espaços em branco no início e fim
              return str.trim();
            }

            for (const numeroPergunta in respostasCorretas) {
              const respostaCorreta = sanitizeString(respostasCorretas[numeroPergunta]);
              const respostaUsuario = respostasUsuario[numeroPergunta] ? sanitizeString(respostasUsuario[numeroPergunta]) : "";

              if (respostaUsuario === respostaCorreta) {
                feedback += `✅ Pergunta ${numeroPergunta}: Resposta correta!\n`;
              } else {
                feedback += `❌ Pergunta ${numeroPergunta}: Resposta incorreta.\n   Sua resposta: ${respostasUsuario[numeroPergunta] || "Nenhuma resposta selecionada"}\n   Resposta correta: ${respostasCorretas[numeroPergunta]}\n`;
                todasCorretas = false;
              }
            }

            if (todasCorretas) {
              feedback += "\nParabéns! Você acertou todas as perguntas do quiz.";
            } else {
              feedback += "\nPor favor, revise suas respostas e tente novamente.";
            }

            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: ${{ steps.obter_issue.outputs.issueNumber }},
              body: feedback,
            });
