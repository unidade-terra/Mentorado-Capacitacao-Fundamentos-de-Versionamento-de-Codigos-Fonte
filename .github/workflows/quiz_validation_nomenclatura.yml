name: Validar Quiz de Nomenclatura

on:
  push:
    paths:
      - '.github/workflows/quiz_validation_nomenclatura.yml' # Ajuste o nome do arquivo para corresponder a este workflow

permissions:
  write-all

jobs:
  validar_quiz:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout do c√≥digo
        uses: actions/checkout@v2

      - name: Obter conte√∫do da issue
        id: obter_issue
        uses: actions/github-script@v6
        with:
          script: |
            // O t√≠tulo da issue do quiz deve ser exato.
            // Para ser mais gen√©rico, voc√™ pode querer buscar a √∫ltima issue com o label 'quiz' ou similar.
            // Por simplicidade, vou usar um t√≠tulo que voc√™ poderia definir para cada quiz.
            const issueTitulo = "Desafio Quiz: Conven√ß√µes de Nomenclatura para Reposit√≥rios Versionados"; // <-- T√çTULO DA ISSUE DO SEU QUIZ

            const issues = await github.rest.issues.listForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
              state: 'all',
            });

            const issue = issues.data.find(i => i.title === issueTitulo);

            if (!issue) {
              console.log(`Issue "${issueTitulo}" n√£o encontrada.`);
              return;
            }

            core.setOutput('issueNumber', issue.number);
            return issue.body;

      - name: Validar respostas do quiz
        id: validar_respostas
        uses: actions/github-script@v6
        with:
          script: |
            const issueBody = `${{ steps.obter_issue.outputs.result }}`;
            if (!issueBody || issueBody.length < 50) { // Adiciona uma verifica√ß√£o b√°sica de tamanho
                console.log('Conte√∫do da issue vazio ou muito curto para ser um quiz.');
                return;
            }

            // --- IN√çCIO DAS RESPOSTAS CORRETAS ATUALIZADAS ---
            const respostasCorretas = {
              "1": "MAJOR.MINOR.PATCH",
              "2": "Ao fazer altera√ß√µes incompat√≠veis na interface p√∫blica ou funcionalidade essencial do software.",
              "3": "Representar corre√ß√µes de bugs compat√≠veis com vers√µes anteriores.",
              "4": "Sinaliza que a vers√£o est√° em desenvolvimento, possui funcionalidades mais completas, mas pode ainda conter bugs.",
              "5": "√â o ramo mais est√°vel do projeto, geralmente representando o c√≥digo em produ√ß√£o, e √© protegido.",
              "6": "Desenvolver uma nova funcionalidade de gerenciamento de usu√°rios.",
              "7": "Garante que todos na equipe entendam o prop√≥sito de cada ramo e vers√£o rapidamente, facilitando a colabora√ß√£o e a organiza√ß√£o.",
              "8": "Espa√ßos, acentos, caracteres especiais e letras mai√∫sculas (exceto em casos espec√≠ficos de vers√£o)."
            };
            // --- FIM DAS RESPOSTAS CORRETAS ATUALIZADAS ---

            const respostasUsuario = {};
            // Ajuste para lidar com o Markdown do quiz, que usa "### X - " para perguntas
            const perguntas = issueBody.split("### ");

            perguntas.slice(1).forEach(pergunta => {
              // Extrai o n√∫mero da pergunta (ex: "1 - Qual...")
              const numeroPerguntaMatch = pergunta.match(/^(\d+)\s*-/);
              if (!numeroPerguntaMatch) return;
              const numeroPergunta = numeroPerguntaMatch[1].trim();

              const opcoes = pergunta.split("- [");

              opcoes.slice(1).forEach(opcao => {
                if (opcao.startsWith("x")) {
                  // A resposta come√ßa ap√≥s "] "
                  respostasUsuario[numeroPergunta] = opcao.split("] ")[1].trim();
                }
              });
            });

            let feedback = "## Resultado do Quiz\n\n";
            let todasCorretas = true;

            // Fun√ß√£o para limpar strings, removendo acentos, espa√ßos invis√≠veis e aspas extras
            function sanitizeString(str) {
              return str.normalize('NFD').replace(/[\u0300-\u036f]/g, '') // Remove acentos
                        .replace(/[\u200B-\u200F\uFEFF]/g, '') // Remove caracteres invis√≠veis (zero width space, etc)
                        .replace(/\s+/g, ' ') // Substitui m√∫ltiplos espa√ßos por um √∫nico
                        .trim() // Remove espa√ßos no in√≠cio/fim
                        .replace(/^"(.*)"$/, '$1'); // Remove aspas externas se houver
            }

            for (const numeroPergunta in respostasCorretas) {
              const respostaCorreta = sanitizeString(respostasCorretas[numeroPergunta]);
              const respostaUsuario = respostasUsuario[numeroPergunta] ? sanitizeString(respostasUsuario[numeroPergunta]) : "";

              if (respostaUsuario === respostaCorreta) {
                feedback += `‚úÖ Pergunta ${numeroPergunta}: Resposta correta!\n`;
              } else {
                feedback += `‚ùå Pergunta ${numeroPergunta}: Resposta incorreta.\n   Sua resposta: "${respostasUsuario[numeroPergunta]}"\n   Resposta esperada: "${respostasCorretas[numeroPergunta]}"\n`;
                todasCorretas = false;
              }
            }

            if (todasCorretas) {
              feedback += "\nParab√©ns! Voc√™ acertou todas as perguntas do quiz. üéâ";
            } else {
              feedback += "\nPor favor, revise suas respostas e tente novamente. üîÑ";
            }

            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: ${{ steps.obter_issue.outputs.issueNumber }},
              body: feedback,
            });
