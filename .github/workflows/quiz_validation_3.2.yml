name: Validar Quiz Navegando no Tempo - O Histórico
on:
  workflow_dispatch:
    inputs: # Esta seção 'inputs' é necessária se você estiver enviando inputs do seu código Java
      content_node_id:
        description: 'The content node ID (Issue ID)'
        required: true
        type: string
      project_id:
        description: 'The project ID'
        required: true
        type: string
      original_card_title:
        description: 'Título original do card do projeto/issue'
        required: true
        type: string
      webhook_payload:
        description: 'Payload completo do webhook em formato string JSON'
        required: true
        type: string

permissions:
  write-all

jobs:
  validar_quiz:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout do código
        uses: actions/checkout@v2

      - name: Obter conteúdo da issue
        id: obter_issue
        uses: actions/github-script@v6
        with:
          script: |
            // O log do payload completo para depuração
            console.log('context.payload:', JSON.stringify(context.payload, null, 2));

            // A linha corrigida para acessar o issueTitulo
            const issueTitulo = context.payload.inputs.original_card_title;
            
            console.log(`Buscando issue com o título: "${issueTitulo}"`);
            const issues = await github.rest.issues.listForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
              state: 'all',
            });

            const issue = issues.data.find(i => i.title === issueTitulo);

            if (!issue) {
              console.log(`Issue "${issueTitulo}" não encontrada.`);
              return;
            }

            core.setOutput('issueNumber', issue.number);
            return issue.body;

      - name: Validar respostas do quiz
        id: validar_respostas
        uses: actions/github-script@v6
        with:
          script: |
            const issueBody = ${{ steps.obter_issue.outputs.result }};
            if (!issueBody) return;

            const respostasCorretas = {
              "1": "Oferecendo uma linha do tempo cronológica das modificações e das decisões tomadas ao longo do tempo.",
              "2": "A mensagem de entrega associada à alteração.",
              "3": "Permitindo identificar qual entrega recente introduziu a falha e analisar as alterações feitas.",
              "4": "Desfazer as alterações introduzidas por aquela entrega, voltando o projeto a um estado anterior.",
              "5": "Entender as alterações específicas que levaram a um problema ou à introdução de uma nova funcionalidade.",
              "6": "Revelando o raciocínio por trás das implementações, correções e adições feitas ao longo do tempo.",
              "7": "Palavras-chave nas mensagens de entrega, autor das alterações ou datas específicas relacionadas ao problema.",
              "8": "Entregas significativas que representam a conclusão de funcionalidades importantes ou grandes refatorações."
            };

            const respostasUsuario = {};
            const perguntas = issueBody.split("# ");

            perguntas.slice(1).forEach(pergunta => {
              const numeroPergunta = pergunta.split(" - ")[0];
              const opcoes = pergunta.split("- [");

              opcoes.slice(1).forEach(opcao => {
                if (opcao.startsWith("x")) {
                  respostasUsuario[numeroPergunta] = opcao.split("] ")[1].trim();
                }
              });
            });

            let feedback = "## Resultado do Quiz\n\n";
            let todasCorretas = true;

            function sanitizeString(str) {
              return str.normalize('NFD').replace(/[\u0300-\u036f]/g, '').replace(/[\u200B-\u200F\uFEFF]/g, '').trim().replace(/^"(.*)"$/, '$1');
            }

            for (const numeroPergunta in respostasCorretas) {
              const respostaCorreta = sanitizeString(respostasCorretas[numeroPergunta]);
              const respostaUsuario = respostasUsuario[numeroPergunta] ? sanitizeString(respostasUsuario[numeroPergunta]) : "";

              if (respostaUsuario === respostaCorreta) {
                feedback += `✅ Pergunta ${numeroPergunta}: Resposta correta!\n`;
              } else {
                feedback += `❌ Pergunta ${numeroPergunta}: Resposta incorreta. Resposta correta: ${respostasCorretas[numeroPergunta]}\n`;
                todasCorretas = false;
              }
            }

            if (todasCorretas) {
              feedback += "\nParabéns! Você acertou todas as perguntas do quiz.";
            } else {
              feedback += "\nPor favor, revise suas respostas e tente novamente.";
            }

            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: ${{ steps.obter_issue.outputs.issueNumber }},
              body: feedback,
            });
