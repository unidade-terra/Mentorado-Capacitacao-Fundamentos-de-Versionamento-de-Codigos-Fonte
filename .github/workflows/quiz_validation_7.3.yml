name: Validar Quiz de Nomenclatura para Repositórios Versionados

on:
  push:
    paths:
      - '.github/workflows/quiz_validation_7.3.yml' # Aciona este workflow quando quiz_validation_7.3.yml é modificado

permissions:
  write-all

jobs:
  validar_quiz:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout do código
        uses: actions/checkout@v2

      - name: Obter conteúdo da issue
        id: obter_issue
        uses: actions/github-script@v6
        with:
          script: |
            // O log do payload completo para depuração
            console.log('context.payload:', JSON.stringify(context.payload, null, 2));

            // A linha corrigida para acessar o issueTitulo
            const issueTitulo = context.payload.inputs.original_card_title;
            
            console.log(`Buscando issue com o título: "${issueTitulo}"`);
            const issues = await github.rest.issues.listForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
              state: 'all',
            });

            const issue = issues.data.find(i => i.title === issueTitulo);

            if (!issue) {
              console.log(`Issue "${issueTitulo}" não encontrada.`);
              return;
            }

            core.setOutput('issueNumber', issue.number);
            return issue.body;

      - name: Validar respostas do quiz
        id: validar_respostas
        uses: actions/github-script@v6
        with:
          script: |
            const issueBody = ${{ steps.obter_issue.outputs.result }};
            if (!issueBody) return;
            const respostasCorretas = {
              "1": "MAJOR.MINOR.PATCH",
              "2": "Ao fazer alterações incompatíveis na interface pública ou funcionalidade essencial do software.",
              "3": "Representar correções de bugs compatíveis com versões anteriores.",
              "4": "Sinaliza que a versão está em desenvolvimento, possui funcionalidades mais completas, mas pode ainda conter bugs.",
              "5": "É o ramo mais estável do projeto, geralmente representando o código em produção, e é protegido.",
              "6": "Desenvolver uma nova funcionalidade de gerenciamento de usuários.",
              "7": "Garante que todos na equipe entendam o propósito de cada ramo e versão rapidamente, facilitando a colaboração e a organização.",
              "8": "Espaços, acentos, caracteres especiais e letras maiúsculas (exceto em casos específicos de versão)."
            };
            const respostasUsuario = {};
            const perguntas = issueBody.split("### ");
            perguntas.slice(1).forEach(pergunta => {
              const numeroPergunta = pergunta.split(" - ")[0];
              const linhas = pergunta.split('\n');
              for (const linha of linhas) {
                if (linha.startsWith("- [x]")) {
                  const textoOpcao = linha.substring(linha.indexOf("] ") + 2).trim();
                  respostasUsuario[numeroPergunta] = textoOpcao;
                  break;
                }
              }
            });
            let feedback = "## Resultado do Quiz\n\n";
            let todasCorretas = true;
            function sanitizeString(str) {
              return str.normalize('NFD').replace(/[\u0300-\u036f]/g, '').replace(/[\u200B-\u200F\uFEFF]/g, '').trim().replace(/^"(.*)"$/, '$1');
            }
            for (const numeroPergunta in respostasCorretas) {
              const respostaCorreta = sanitizeString(respostasCorretas[numeroPergunta]);
              const respostaUsuario = respostasUsuario[numeroPergunta] ? sanitizeString(respostasUsuario[numeroPergunta]) : "";
              if (respostaUsuario === respostaCorreta) {
                feedback += `✅ Pergunta ${numeroPergunta}: Resposta correta!\n`;
              } else {
                feedback += `❌ Pergunta ${numeroPergunta}: Resposta incorreta. Resposta correta: ${respostasCorretas[numeroPergunta]}\n`;
                todasCorretas = false;
              }
            }
            if (todasCorretas) {
              feedback += "\nParabéns! Você acertou todas as perguntas do quiz.";
            } else {
              feedback += "\nPor favor, revise suas respostas e tente novamente.";
            }
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: ${{ steps.obter_issue.outputs.issueNumber }},
              body: feedback,
            });
